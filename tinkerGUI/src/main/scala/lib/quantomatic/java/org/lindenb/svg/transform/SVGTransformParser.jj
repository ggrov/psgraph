
options {
STATIC=false;
IGNORE_CASE=true;
DEBUG_PARSER=false;
DEBUG_TOKEN_MANAGER=false;
LOOKAHEAD=2;
}


PARSER_BEGIN(SVGTransformParser)
package org.lindenb.svg.transform;
import java.awt.geom.AffineTransform;
/**
 * SVGTransformParser
 */
public class SVGTransformParser
	{
	public SVGTransformParser(String s)
		{
		this(new java.io.StringReader(s));
		}
	
	/**
	 * Parses a SVG tranformation
	 * and returns a java.awt.geom.AffineTransform
	 * @throws IllegalArgumentException if there is an error
	 */
	public static AffineTransform parse(String s)
		{
		try
			{
			return new SVGTransformParser(s).transform();
			}
		catch(ParseException err)
			{
			throw new IllegalArgumentException("Cannot parse transform \""+s+"\" :"+err);
			}
		}
	
	/** test */
	public static void main(String args[])
		throws Exception
		{
		for(String s:args)
			{
			AffineTransform tr=parse(s);
			double f[]=new double[6];
			tr.getMatrix(f);
			System.out.println("("+
					f[0]+","+f[1]+","+
					f[2]+","+f[3]+","+
					f[4]+","+f[5]+")"
					);
			}
		}
	}
PARSER_END(SVGTransformParser)

TOKEN:
	{
	  <DOT: "." >
	| <PLUS: "+" >
	| <MINUS: "-" >
	| <#DIGIT: ["0"-"9"] >
	| <POSITIVE_INTEGER: (<DIGIT>)+ >
	| <SIGN: (<PLUS> | <MINUS>) >
	| <#EXPONENT: ("E"|"e") (<SIGN>)? <POSITIVE_INTEGER> >
	| <FLOATING_NUMBER:(<SIGN>)?
	         ( 
		  (<DIGIT>)* <DOT> (<DIGIT>)* (<EXPONENT>)?
		| <POSITIVE_INTEGER> (<EXPONENT>)
		)
		 >
	| <MATRIX: "matrix">
	| <TRANSLATE: "translate">
	| <ROTATE: "rotate">
	| <SCALE: "scale">
	| <SKEWX: "skewX">
	| <SKEWY: "skewY">
	| <PAR_OPEN: "(">
	| <PAR_CLOSE: ")">
	| <COMMA: ",">
	}

SKIP :
	{
	" "
	| "\t"
	| "\n"
	| "\r"
	}

public AffineTransform transform():
	{
	AffineTransform newtr;
	AffineTransform tr=new AffineTransform();
	}
	{
	(( newtr = tr_item() 
		{
		tr.concatenate(newtr);
		} )+ )
		{
		return tr;
		}
	}
	
public AffineTransform tr_item():{AffineTransform tr;}
	{
	(
	  tr=matrix()
	| tr=translate()
	| tr=rotate()
	| tr=scale()
	)
		{
		return tr;
		}
	}

private AffineTransform matrix():{double i1,i2,i3,i4,i5,i6;}
	{
	<MATRIX>
	<PAR_OPEN>
	i1= number()
	<COMMA>
	i2= number()
	<COMMA>
	i3= number()
	<COMMA>
	i4= number()
	<COMMA>
	i5= number()
	<COMMA>
	i6= number()
	<PAR_CLOSE>
		{
		return new AffineTransform(i1,i2,i3,i4,i5,i6);
		}
	}

private AffineTransform translate():{double i1,i2;}
	{
	<TRANSLATE>
	<PAR_OPEN>
	i1= number()
	(<COMMA>)?
	i2= number()
	<PAR_CLOSE>
		{
		return AffineTransform.getTranslateInstance(i1,i2);
		}
	}

private AffineTransform rotate():{
	double i1;
	Double i2=null;
	Double i3=null;
	}
	{
	<ROTATE>
	<PAR_OPEN>
	i1= number()
		(
		(<COMMA>)?
		i2= number()
		(<COMMA>)?
		i3= number()
		)?
	<PAR_CLOSE>
		{
		if(i2!=null)
			{
			return AffineTransform.getRotateInstance(i1,i2,i3);
			}
		return AffineTransform.getRotateInstance(i1);
		}
	}


private AffineTransform scale():{
	double i1;
	Double i2=null;
	}
	{
	<SCALE> 
	<PAR_OPEN>
	i1= number()
		(
		(<COMMA>)?
		i2= number()
		)?
	<PAR_CLOSE>
		{
		return AffineTransform.getScaleInstance(i1,i2==null?i1:i2.doubleValue());
		}
	}

private double number():{double f;}
	{
	(f=integer()|f=floating())
		{
		return f;
		}
	}

private double floating():{Token t;}
	{
	t=<FLOATING_NUMBER> { return Double.parseDouble(t.image);}
	}

private int integer():{int n;int sig=1;}
	{
	(<PLUS>{sig=1;} | <MINUS>{sig=-1;})? n=positiveInteger() { return n*sig;}
	}

private int positiveInteger():{Token t;}
	{
	t=<POSITIVE_INTEGER> { return Integer.parseInt(t.image);}
	}


